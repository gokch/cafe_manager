// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createAdmin = `-- name: CreateAdmin :exec
INSERT INTO admin (id, name, pw, phone) VALUES (?, ?, ?, ?)
`

type CreateAdminParams struct {
	ID    string `json:"id"`
	Name  string `json:"name"`
	Pw    []byte `json:"pw"`
	Phone string `json:"phone"`
}

func (q *Queries) CreateAdmin(ctx context.Context, arg CreateAdminParams) error {
	_, err := q.exec(ctx, q.createAdminStmt, createAdmin,
		arg.ID,
		arg.Name,
		arg.Pw,
		arg.Phone,
	)
	return err
}

const createProduct = `-- name: CreateProduct :exec
INSERT INTO product (category, price, cost, name, name_initial, description, barcode, expire, size) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateProductParams struct {
	Category    sql.NullString `json:"category"`
	Price       int32          `json:"price"`
	Cost        int32          `json:"cost"`
	Name        string         `json:"name"`
	NameInitial string         `json:"name_initial"`
	Description string         `json:"description"`
	Barcode     []byte         `json:"barcode"`
	Expire      time.Time      `json:"expire"`
	Size        int32          `json:"size"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) error {
	_, err := q.exec(ctx, q.createProductStmt, createProduct,
		arg.Category,
		arg.Price,
		arg.Cost,
		arg.Name,
		arg.NameInitial,
		arg.Description,
		arg.Barcode,
		arg.Expire,
		arg.Size,
	)
	return err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM product WHERE seq = ?
`

func (q *Queries) DeleteProduct(ctx context.Context, seq int64) error {
	_, err := q.exec(ctx, q.deleteProductStmt, deleteProduct, seq)
	return err
}

const getAdmin = `-- name: GetAdmin :one
SELECT seq, id, name, pw, phone FROM admin WHERE id = ? LIMIT ?
`

type GetAdminParams struct {
	ID    string `json:"id"`
	Limit int32  `json:"limit"`
}

func (q *Queries) GetAdmin(ctx context.Context, arg GetAdminParams) (*Admin, error) {
	row := q.queryRow(ctx, q.getAdminStmt, getAdmin, arg.ID, arg.Limit)
	var i Admin
	err := row.Scan(
		&i.Seq,
		&i.ID,
		&i.Name,
		&i.Pw,
		&i.Phone,
	)
	return &i, err
}

const getProduct = `-- name: GetProduct :one
SELECT seq, category, price, cost, name, name_initial, description, barcode, expire, size FROM product WHERE seq = ? LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, seq int64) (*Product, error) {
	row := q.queryRow(ctx, q.getProductStmt, getProduct, seq)
	var i Product
	err := row.Scan(
		&i.Seq,
		&i.Category,
		&i.Price,
		&i.Cost,
		&i.Name,
		&i.NameInitial,
		&i.Description,
		&i.Barcode,
		&i.Expire,
		&i.Size,
	)
	return &i, err
}

const listProductsByName = `-- name: ListProductsByName :many
SELECT seq, category, price, cost, name, name_initial, description, barcode, expire, size FROM product WHERE name LIKE ? LIMIT ?
`

type ListProductsByNameParams struct {
	Name  string `json:"name"`
	Limit int32  `json:"limit"`
}

func (q *Queries) ListProductsByName(ctx context.Context, arg ListProductsByNameParams) ([]*Product, error) {
	rows, err := q.query(ctx, q.listProductsByNameStmt, listProductsByName, arg.Name, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.Seq,
			&i.Category,
			&i.Price,
			&i.Cost,
			&i.Name,
			&i.NameInitial,
			&i.Description,
			&i.Barcode,
			&i.Expire,
			&i.Size,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductsByNameInitial = `-- name: ListProductsByNameInitial :many
SELECT seq, category, price, cost, name, name_initial, description, barcode, expire, size FROM product WHERE name_initial LIKE ? LIMIT ?
`

type ListProductsByNameInitialParams struct {
	NameInitial string `json:"name_initial"`
	Limit       int32  `json:"limit"`
}

func (q *Queries) ListProductsByNameInitial(ctx context.Context, arg ListProductsByNameInitialParams) ([]*Product, error) {
	rows, err := q.query(ctx, q.listProductsByNameInitialStmt, listProductsByNameInitial, arg.NameInitial, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.Seq,
			&i.Category,
			&i.Price,
			&i.Cost,
			&i.Name,
			&i.NameInitial,
			&i.Description,
			&i.Barcode,
			&i.Expire,
			&i.Size,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAdminPw = `-- name: UpdateAdminPw :exec
UPDATE admin SET pw = ? WHERE id = ?
`

type UpdateAdminPwParams struct {
	Pw []byte `json:"pw"`
	ID string `json:"id"`
}

func (q *Queries) UpdateAdminPw(ctx context.Context, arg UpdateAdminPwParams) error {
	_, err := q.exec(ctx, q.updateAdminPwStmt, updateAdminPw, arg.Pw, arg.ID)
	return err
}

const updateProductIfNotNil = `-- name: UpdateProductIfNotNil :exec
UPDATE product
SET category = COALESCE(?, category),
    price = COALESCE(?, price),
    cost = COALESCE(?, cost),
    name = COALESCE(?, name),
    name_initial = COALESCE(?, name_initial),
    description = COALESCE(?, description),
    barcode = COALESCE(?, barcode),
    expire = COALESCE(?, expire),
    size = COALESCE(?, size)
WHERE seq = ?
`

type UpdateProductIfNotNilParams struct {
	Category    sql.NullString `json:"category"`
	Price       sql.NullInt32  `json:"price"`
	Cost        sql.NullInt32  `json:"cost"`
	Name        sql.NullString `json:"name"`
	NameInitial sql.NullString `json:"name_initial"`
	Decription  sql.NullString `json:"decription"`
	Barcode     sql.NullString `json:"barcode"`
	Expire      sql.NullTime   `json:"expire"`
	Size        sql.NullInt32  `json:"size"`
	Seq         int64          `json:"seq"`
}

func (q *Queries) UpdateProductIfNotNil(ctx context.Context, arg UpdateProductIfNotNilParams) error {
	_, err := q.exec(ctx, q.updateProductIfNotNilStmt, updateProductIfNotNil,
		arg.Category,
		arg.Price,
		arg.Cost,
		arg.Name,
		arg.NameInitial,
		arg.Decription,
		arg.Barcode,
		arg.Expire,
		arg.Size,
		arg.Seq,
	)
	return err
}
