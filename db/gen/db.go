// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package gen

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createAdminStmt, err = db.PrepareContext(ctx, createAdmin); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAdmin: %w", err)
	}
	if q.createProductStmt, err = db.PrepareContext(ctx, createProduct); err != nil {
		return nil, fmt.Errorf("error preparing query CreateProduct: %w", err)
	}
	if q.deleteProductStmt, err = db.PrepareContext(ctx, deleteProduct); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteProduct: %w", err)
	}
	if q.getAdminStmt, err = db.PrepareContext(ctx, getAdmin); err != nil {
		return nil, fmt.Errorf("error preparing query GetAdmin: %w", err)
	}
	if q.getProductStmt, err = db.PrepareContext(ctx, getProduct); err != nil {
		return nil, fmt.Errorf("error preparing query GetProduct: %w", err)
	}
	if q.listProductsStmt, err = db.PrepareContext(ctx, listProducts); err != nil {
		return nil, fmt.Errorf("error preparing query ListProducts: %w", err)
	}
	if q.searchProductsByNameStmt, err = db.PrepareContext(ctx, searchProductsByName); err != nil {
		return nil, fmt.Errorf("error preparing query SearchProductsByName: %w", err)
	}
	if q.searchProductsByNameInitialStmt, err = db.PrepareContext(ctx, searchProductsByNameInitial); err != nil {
		return nil, fmt.Errorf("error preparing query SearchProductsByNameInitial: %w", err)
	}
	if q.updateAdminPwStmt, err = db.PrepareContext(ctx, updateAdminPw); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAdminPw: %w", err)
	}
	if q.updateProductIfNotNilStmt, err = db.PrepareContext(ctx, updateProductIfNotNil); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateProductIfNotNil: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createAdminStmt != nil {
		if cerr := q.createAdminStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAdminStmt: %w", cerr)
		}
	}
	if q.createProductStmt != nil {
		if cerr := q.createProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createProductStmt: %w", cerr)
		}
	}
	if q.deleteProductStmt != nil {
		if cerr := q.deleteProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteProductStmt: %w", cerr)
		}
	}
	if q.getAdminStmt != nil {
		if cerr := q.getAdminStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAdminStmt: %w", cerr)
		}
	}
	if q.getProductStmt != nil {
		if cerr := q.getProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProductStmt: %w", cerr)
		}
	}
	if q.listProductsStmt != nil {
		if cerr := q.listProductsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listProductsStmt: %w", cerr)
		}
	}
	if q.searchProductsByNameStmt != nil {
		if cerr := q.searchProductsByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchProductsByNameStmt: %w", cerr)
		}
	}
	if q.searchProductsByNameInitialStmt != nil {
		if cerr := q.searchProductsByNameInitialStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchProductsByNameInitialStmt: %w", cerr)
		}
	}
	if q.updateAdminPwStmt != nil {
		if cerr := q.updateAdminPwStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAdminPwStmt: %w", cerr)
		}
	}
	if q.updateProductIfNotNilStmt != nil {
		if cerr := q.updateProductIfNotNilStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateProductIfNotNilStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                              DBTX
	tx                              *sql.Tx
	createAdminStmt                 *sql.Stmt
	createProductStmt               *sql.Stmt
	deleteProductStmt               *sql.Stmt
	getAdminStmt                    *sql.Stmt
	getProductStmt                  *sql.Stmt
	listProductsStmt                *sql.Stmt
	searchProductsByNameStmt        *sql.Stmt
	searchProductsByNameInitialStmt *sql.Stmt
	updateAdminPwStmt               *sql.Stmt
	updateProductIfNotNilStmt       *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                              tx,
		tx:                              tx,
		createAdminStmt:                 q.createAdminStmt,
		createProductStmt:               q.createProductStmt,
		deleteProductStmt:               q.deleteProductStmt,
		getAdminStmt:                    q.getAdminStmt,
		getProductStmt:                  q.getProductStmt,
		listProductsStmt:                q.listProductsStmt,
		searchProductsByNameStmt:        q.searchProductsByNameStmt,
		searchProductsByNameInitialStmt: q.searchProductsByNameInitialStmt,
		updateAdminPwStmt:               q.updateAdminPwStmt,
		updateProductIfNotNilStmt:       q.updateProductIfNotNilStmt,
	}
}
