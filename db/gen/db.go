// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package gen

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createAdminStmt, err = db.PrepareContext(ctx, createAdmin); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAdmin: %w", err)
	}
	if q.createMenuStmt, err = db.PrepareContext(ctx, createMenu); err != nil {
		return nil, fmt.Errorf("error preparing query CreateMenu: %w", err)
	}
	if q.deleteMenuStmt, err = db.PrepareContext(ctx, deleteMenu); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteMenu: %w", err)
	}
	if q.getAdminStmt, err = db.PrepareContext(ctx, getAdmin); err != nil {
		return nil, fmt.Errorf("error preparing query GetAdmin: %w", err)
	}
	if q.getMenuStmt, err = db.PrepareContext(ctx, getMenu); err != nil {
		return nil, fmt.Errorf("error preparing query GetMenu: %w", err)
	}
	if q.listMenusStmt, err = db.PrepareContext(ctx, listMenus); err != nil {
		return nil, fmt.Errorf("error preparing query ListMenus: %w", err)
	}
	if q.searchMenusByNameStmt, err = db.PrepareContext(ctx, searchMenusByName); err != nil {
		return nil, fmt.Errorf("error preparing query SearchMenusByName: %w", err)
	}
	if q.searchMenusByNameInitialStmt, err = db.PrepareContext(ctx, searchMenusByNameInitial); err != nil {
		return nil, fmt.Errorf("error preparing query SearchMenusByNameInitial: %w", err)
	}
	if q.updateAdminPwStmt, err = db.PrepareContext(ctx, updateAdminPw); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAdminPw: %w", err)
	}
	if q.updateMenuIfNotNilStmt, err = db.PrepareContext(ctx, updateMenuIfNotNil); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateMenuIfNotNil: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createAdminStmt != nil {
		if cerr := q.createAdminStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAdminStmt: %w", cerr)
		}
	}
	if q.createMenuStmt != nil {
		if cerr := q.createMenuStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createMenuStmt: %w", cerr)
		}
	}
	if q.deleteMenuStmt != nil {
		if cerr := q.deleteMenuStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteMenuStmt: %w", cerr)
		}
	}
	if q.getAdminStmt != nil {
		if cerr := q.getAdminStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAdminStmt: %w", cerr)
		}
	}
	if q.getMenuStmt != nil {
		if cerr := q.getMenuStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMenuStmt: %w", cerr)
		}
	}
	if q.listMenusStmt != nil {
		if cerr := q.listMenusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listMenusStmt: %w", cerr)
		}
	}
	if q.searchMenusByNameStmt != nil {
		if cerr := q.searchMenusByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchMenusByNameStmt: %w", cerr)
		}
	}
	if q.searchMenusByNameInitialStmt != nil {
		if cerr := q.searchMenusByNameInitialStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchMenusByNameInitialStmt: %w", cerr)
		}
	}
	if q.updateAdminPwStmt != nil {
		if cerr := q.updateAdminPwStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAdminPwStmt: %w", cerr)
		}
	}
	if q.updateMenuIfNotNilStmt != nil {
		if cerr := q.updateMenuIfNotNilStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateMenuIfNotNilStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                           DBTX
	tx                           *sql.Tx
	createAdminStmt              *sql.Stmt
	createMenuStmt               *sql.Stmt
	deleteMenuStmt               *sql.Stmt
	getAdminStmt                 *sql.Stmt
	getMenuStmt                  *sql.Stmt
	listMenusStmt                *sql.Stmt
	searchMenusByNameStmt        *sql.Stmt
	searchMenusByNameInitialStmt *sql.Stmt
	updateAdminPwStmt            *sql.Stmt
	updateMenuIfNotNilStmt       *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                           tx,
		tx:                           tx,
		createAdminStmt:              q.createAdminStmt,
		createMenuStmt:               q.createMenuStmt,
		deleteMenuStmt:               q.deleteMenuStmt,
		getAdminStmt:                 q.getAdminStmt,
		getMenuStmt:                  q.getMenuStmt,
		listMenusStmt:                q.listMenusStmt,
		searchMenusByNameStmt:        q.searchMenusByNameStmt,
		searchMenusByNameInitialStmt: q.searchMenusByNameInitialStmt,
		updateAdminPwStmt:            q.updateAdminPwStmt,
		updateMenuIfNotNilStmt:       q.updateMenuIfNotNilStmt,
	}
}
